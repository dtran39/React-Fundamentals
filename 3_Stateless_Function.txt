1.  Stateless Functional Components in React
	- separating your components into container components and presentational components
		+ with presentational components optionally taking in some data and rendering a view
	-> Use as many Stateless Functional Components as possible
	- Disadvantages:
		 + they don't support shouldComponentUpdate
2. PropTypes
	A way to check type in JS through React
3. Separating container components to presentational components
	https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.d10xvlo1h
	Benefit:
	- Better separation of concerns.
		You understand your app and your UI better by writing components this way.
	- Better reusability.
	 	You can use the same presentational component
			with completely different state sources,
			and turn those into separate container components
				that can be further reused.
	- Presentational components are essentially your app’s “palette”.
		You can put them on a single page
			and let the designer tweak all their variations
			without touching the app’s logic.
			You can run screenshot regression tests on that page.
	- This forces you to extract “layout components” such as Sidebar, Page, ContextMenu
			and use this.props.children instead of
			duplicating the same markup and layout in several container components.
	When to use:
	I suggest you to start building your app with just presentational components first.
	Eventually you’ll realize that
		you are passing too many props down the intermediate components.
	When you notice that some components don’t use the props
		they receive but merely forward them down
		and you have to rewire all those intermediate components
		any time the children need more data,
		it’s a good time to introduce some container components.
	This way you can get the data and the behavior props to the leaf components
		without burdening the unrelated components in the middle of the tree.
		This is an ongoing process of refactoring
			so don’t try to get it right the first time.
		As you experiment with this pattern,
			you will develop an intuitive sense for when it’s time to extract some containers,
			just like you know when it’s time to extract a function.
